datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String          @unique
    emailVerified DateTime?
    image         String?
    level         Level           @default(USER)
    linkLimit     Int             @default(5)
    accounts      Account[]
    sessions      Session[]
    // Optional for WebAuthn support
    Authenticator Authenticator[]

    Links   Link[]
    Reports Report[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum Level {
    USER
    ADMIN
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}

model Link {
    id              String   @id
    userId          String
    shortCode       String
    longLink        String
    redirectCount   Int      @default(0)
    disabled        Boolean  @default(false)
    disabledMessage String?
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    User   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    Report Report[]

    @@unique([id])
}

model Report {
    id     String     @id @default(cuid())
    linkId String
    type   ReportType
    desc   String?
    userId String

    Link Link @relation(fields: [linkId], references: [id], onDelete: Cascade)
    User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ReportType {
    SPAM
    NSFW
    MISLEADING
    OTHER
}
